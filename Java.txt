생활코딩

Java

Java는 사용자와 상호작용.
HTML은 정적, Java는 동적(Night,Day 클릭 기능)

<script>		java 코드가 옴 </script>
		html과 다른점 : 동적임, 예를 들어 계산기기능 가능
<input type="button" value="hi" onclick="alert('하이')">	// hi라는 버튼을 만듬, 클릭 시 하이라는 메세지 출력
<input type="text" onclick="alert('changed')">	// text상자를 만듬. text안 글자가 바뀌면 changed라는 메세지 출력
<input type="text" onkeydown="alert('key down!')"> //  text상자를 만듬. text안의 글자가 입력되면 key down!이라는 메세지 출력
-> on~~ : event

console 기능 : console을 이용하면 웹페이지 내에서 JS가 실행되는 것

"kdofaksd".length -> 문자열 길이
이 length와 같은걸 properties라고 함.

'hello world'.indexOf('o)  = 4   // o가 시작하는 위치를 숫자로 표현
'              hello         '.trim = "hello"   // 공백을 없애줌

1+1 = 2
'1'+'1'="11"

x=1 -> 대입연산자, 우변을 좌변에 대입

var name='egoing'
"sfa sdf"+name+"asgrga"
->  name에 egoing 대입

css복습 -> <div> : css를 쓰기위한 아무것도 없는 태그, 단 줄바꿈이 됨
	  <span> : 줄바꿈도 x
	ex. <div style=""> 등등

head태그 안에 <style>
		.js			//  js 라는 class
		{
		font-weight: bold;
		}
	       </style>
 -> 실행 시 js라는 class의 font를 진하게 변경

본문에서 JavaScript를 바꾸고 싶을땐, <span class="js">JavaScript</span> 해주면됨

head태그 안에 <style>
		#first			//   first 라는 id
		{
		color: green;
		}
	       </style>
-> 실행 시 first라는 id의 색을 초록색으로 변경
<span id="first" class="js">JavaScript</span>

id와 class가 서로 다른 색을 지칭하고 있을때,
-> class는 그룹핑이고 id는 하나의 식별자이므로 id의 색이 우선.
	즉, class로 포괄적인 디자인을 한 후 id로 예외적인 디자인을 함.
또한 어떤 한 태그의 style을 변경한 경우, 예를들어 span 태그에 파란색을 준 경우
-> 태그는 class보다도 더 포괄적이므로 태그-> class -> id 순.
	즉, class와 id에 따로 색 지정이 없는 순수한 태그에만 파란색 적용


<input type="button" value="night" onclick"		// 버튼, 이름은night, 클릭시
document.querySelector('body').style.backgroundColor ='black';	//body라는 태그를 선택하고 배경색을 black으로 변경
document.querySelector('body').style.color ='white';	// body라는 태그를 선택하고 글자색을 흰색으로 변경
">
이와같이 day모드도 제작 가능


toggle 만들기
===연산자 : 같은지 다른지 비교하는 연산자 true 또는 false로 반환
if문 : 
if(조건){			// 조건에는 true or false 타입만 올 수 있음 boolean
	실행할 구문
	}

<input type="button" value="night" onclick"		
document.querySelector('body').style.backgroundColor ='black';	
document.querySelector('body').style.color ='white';
">
이 부분에서 value의 값만 가져오고 싶을땐?
<input id="night_day" type="button" ....>
id 값을 우선 추가한다
그리고 document.querySelector('#night_day').value 를 이용해
id가 night_day인 곳의 value를 들고올 수 있음.

즉 if문과 결합하면
if(document.querySelector('#night_day').value==='day'){
}
이렇게 하면 id가 night_day인 곳의 value가 day이면 위 조건문을 실행.
그리고 if문이 참일때 value를 night로 바꿔주면 버튼이 day와 night로 바뀌게됨


리팩토링 -> 반복되고 중복되는 것들을 줄임.
this.value -> 이 밸류를 가져옴, 굳이 id 부여를 하지 않아도 됨.
중복되는 부분을 바꾸는법
var target = document.querySelector('body') // 오른쪽 값을 target으로 들고옴
target.style.color = 'white'   // target의 글자색을 흰색으로 변경
document.querySelector('body')

array 배열
다른 언어와 비슷하게 var co = ['da','na'] 형식으로 표현
co[0]='da', co[1]='na'
co.push('ka')  		// 배열에 ka라는 문자를 추가

링크 색 모두 변경 for, while 이용
document.querySelectorAll('class')   /// 	class를 모두 가져옴 (list의 형태로)
alist = document.querySelectorAll('class')
alist[0], alist[1], alist.length, alist.style.color="black" 등등

함수
function nightDayHandler(self){
			}
그 후 원하는 곳에서 nightDayHandler(this);
return은 함수에서 값을 돌려주는 것.
document.write('<div style="color:red">'+sum(2,3)+'</div>');
이런식으로.

함수에서 매개변수 function nightDayHandler(self) 	// self라는 매개변수
함수를 사용할땐, nightDayHandler(this);

객체
함수 자체를 여러개 이름을 다르게 하여 설정하는 것 보다
body에서 backgroungcolor, color 등 많은 설정을 해야할때
Body나 Links라는 라는 객체를 만들어서 body.setBackgroundColor, body.setColor 등으로 표현
객체 속에 있는건 메소드라고 함.
객체는 순서없이 저장됨 <-> array랑 차이점
객체는 {}를 써서 만듬, 각 객체의 원소는 이름을 부여해야함
var coworkers = {
	"programmer" : "egoing",		// egoing이라는 원소의 이름이 programmer
	"designer" : " leezche"
};
document.write("programmer : " + coworkers.programmer + "<br>");
document.write("designer : " + coworkers.designer + "<br>");
객체의 원소 삽입
coworkers.bookkeeper = "duru";	// duru라는 bookkeeper
-> 이름에서 공백은 사용불가
대신 coworkers["data scientist"] = "taeho"; 와 같이 표현하면 공백 사용 가능

객체에서 반복문
for(var key in coworkers){		// coworkers라는 객체에서 key값(각 원소의 이름)을 가져온다
	document.write(key+'<br>');		// coworkers의 모든 객체를 가져옴
}		// 실행 시 programmer, designer, bookkeeper 등이 출력됨
document.write(key+'<br>'); 대신에
document.write(coworkers[key]+'<br>'); 를 실행 시 egoing, leezche 등이 출력됨

객체 안의 원소가 함수가 올 수도 있음
coworkers.showAll = function(){
	for(var key in coworkers){
		document.write(key+' : '+coworkers[key]+'<br>');
	}
}
이거 대신에 
coworkers.showAll = function(){
	for(var key in this){
		document.write(key+' : '+this[key]+'<br>');
	}
}		도 가능

함수이면서 객체원소 -> 메소드		// Body.setColor
함수가 아닌 객체의원소 -> 프로퍼티		// coworkers.designer

파일로 쪼개기
-> 공통된 코드를 한곳에서 관리
colors.js라는 파일을 만들고 그 안에 공통된 js를 붙여넣은 후 
<script src="colors.js"></script> 라는 자바 스크립트를 실행

라이브러리, 프레임워크 둘 다 여러 사용자와 같이 작업하는 환경
라이브러리 : jQuery 등 을 이용해 간편하게 코딩 가능
	ex)   $('a').css('color', color);		// 링크의 모든 색을 input color로 변경
